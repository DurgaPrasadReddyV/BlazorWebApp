@using WebAppStarter.Shared.UI.Services
@inherits LayoutComponentBase
@inject OfflineModeState OfflineModeState

<PageTitle>WebApp</PageTitle>

<MudRTLProvider RightToLeft="@LayoutService.IsRTL">
    <MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="@LayoutService.SetDarkMode" />
    <MudPopoverProvider />
    <MudSnackbarProvider />
    <MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.ExtraSmall" />
    <MudLayout>
        <TitleBar></TitleBar>
        <NavigationBar></NavigationBar>
        <MudMainContent Style="padding-top:1.5rem !important">
            <MudContainer Gutters="false">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</MudRTLProvider>

@code {
    [Inject]
    public LayoutService LayoutService { get; set; } = default!;
    private MudThemeProvider _mudThemeProvider = default!;

    protected override async Task OnInitializedAsync()
    {
        if (LayoutService != null)
        {
            LayoutService.MajorUpdateOccurred += LayoutServiceOnMajorUpdateOccured;
        }

        await OfflineModeState.InitializeAsync();
        await ApplyUserPreferences();

        if (_mudThemeProvider != null)
        {
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
        }

    }

    private async Task ApplyUserPreferences()
    {
        if (_mudThemeProvider != null)
        {
            var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
            if (LayoutService != null)
            {
                await LayoutService.ApplyUserPreferences(defaultDarkMode);
            }
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        if (LayoutService != null)
        {
            await LayoutService.OnSystemPreferenceChanged(newValue);
        }
    }

    public void Dispose()
    {
        if (LayoutService != null)
        {
            LayoutService.MajorUpdateOccurred -= LayoutServiceOnMajorUpdateOccured;
        }
    }

    private void LayoutServiceOnMajorUpdateOccured(object? sender, EventArgs e) => StateHasChanged();
}